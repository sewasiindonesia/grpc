// Code generated by protoc-gen-go. DO NOT EDIT.
// source: slack.proto

package slack

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("slack.proto", fileDescriptor_9854575cceed3a63)
}

var fileDescriptor_9854575cceed3a63 = []byte{
	// 104 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xce, 0x49, 0x4c,
	0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0xa4, 0xf8, 0xc0, 0x54, 0x52,
	0x7e, 0x09, 0x44, 0xd8, 0x28, 0x8e, 0x8b, 0x35, 0x18, 0x24, 0x22, 0x14, 0xca, 0x25, 0x10, 0x9c,
	0x9a, 0x97, 0x02, 0xe6, 0xf8, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x0a, 0xc9, 0xe9, 0x41, 0x4c,
	0x40, 0x97, 0x08, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x91, 0x92, 0xc7, 0x29, 0x5f, 0x5c, 0x90,
	0x9f, 0x57, 0x9c, 0xaa, 0xc4, 0x90, 0xc4, 0x06, 0xb6, 0xc6, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff,
	0x34, 0x16, 0xdf, 0x22, 0x8c, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SlackClient is the client API for Slack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SlackClient interface {
	SendSlackMessage(ctx context.Context, in *SendSlackMessageRequest, opts ...grpc.CallOption) (*SendSlackMessageResponse, error)
}

type slackClient struct {
	cc grpc.ClientConnInterface
}

func NewSlackClient(cc grpc.ClientConnInterface) SlackClient {
	return &slackClient{cc}
}

func (c *slackClient) SendSlackMessage(ctx context.Context, in *SendSlackMessageRequest, opts ...grpc.CallOption) (*SendSlackMessageResponse, error) {
	out := new(SendSlackMessageResponse)
	err := c.cc.Invoke(ctx, "/slack.Slack/SendSlackMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlackServer is the server API for Slack service.
type SlackServer interface {
	SendSlackMessage(context.Context, *SendSlackMessageRequest) (*SendSlackMessageResponse, error)
}

// UnimplementedSlackServer can be embedded to have forward compatible implementations.
type UnimplementedSlackServer struct {
}

func (*UnimplementedSlackServer) SendSlackMessage(ctx context.Context, req *SendSlackMessageRequest) (*SendSlackMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSlackMessage not implemented")
}

func RegisterSlackServer(s *grpc.Server, srv SlackServer) {
	s.RegisterService(&_Slack_serviceDesc, srv)
}

func _Slack_SendSlackMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSlackMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackServer).SendSlackMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slack.Slack/SendSlackMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackServer).SendSlackMessage(ctx, req.(*SendSlackMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Slack_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slack.Slack",
	HandlerType: (*SlackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSlackMessage",
			Handler:    _Slack_SendSlackMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slack.proto",
}
